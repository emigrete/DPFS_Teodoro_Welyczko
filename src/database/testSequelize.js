const db = require('./models'); // Importa los modelos
const { Op } = require('sequelize'); // Operadores de Sequelize

async function testSequelize() {
  try {
    console.log("üîç Verificando conexi√≥n con la base de datos...");

    // 1Ô∏è‚É£ Verificar conexi√≥n a la base de datos
    await db.sequelize.authenticate();
    console.log("‚úÖ Conexi√≥n exitosa con la base de datos.");

    // 2Ô∏è‚É£ Consultar los usuarios en la base de datos
    const users = await db.User.findAll();
    console.log("üë§ Usuarios encontrados:", users.map(u => u.toJSON()));

    // 3Ô∏è‚É£ Insertar un nuevo usuario de prueba
    const newUser = await db.User.create({
      firstName: "Test",
      lastName: "User",
      email: `test${Date.now()}@example.com`,
      password: "test123", // ‚ö†Ô∏è Normalmente aqu√≠ se debe encriptar con bcrypt
      role: "user",
      image: "default.jpg"
    });
    console.log("üÜï Usuario creado:", newUser.toJSON());

    // 4Ô∏è‚É£ Buscar un producto en la base de datos
    const product = await db.Product.findOne();
    if (product) {
      console.log("üõç Producto encontrado:", product.toJSON());
    } else {
      console.log("‚ö†Ô∏è No hay productos en la base de datos.");
    }

    // 5Ô∏è‚É£ Buscar productos en una categor√≠a espec√≠fica
    const category = await db.Category.findOne();
    if (category) {
      const categoryProducts = await db.Product.findAll({
        where: { categoryId: category.id }
      });
      console.log(`üìÇ Productos en la categor√≠a ${category.name}:`, categoryProducts.map(p => p.toJSON()));
    }

    console.log("‚úÖ Todas las pruebas se ejecutaron correctamente.");

  } catch (error) {
    console.error("‚ùå Error en la prueba de Sequelize:", error);
  } finally {
    process.exit(); // Cierra la ejecuci√≥n
  }
}

testSequelize();
